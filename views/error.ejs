<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title><%= error %></title>
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
  <style>
    body {
      font-size: 16px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      -webkit-font-smoothing: antialiased;
    }
    html, body { margin: 0 }
    * { box-sizing: border-box; }

    header {
      background: #020460;
      padding: 15px;
      color: #fff;
      font-family: Helvetica, sans-serif;
    }

    header h5 {
      font-size: 1.2em;
      margin: 0;
      color: red;
    }

    header p { font-size: 1.1em; }

    code {
      overflow: scroll;
    }
    pre { 
      margin: 0;
    }

    input {
      font-size: 16px;
      padding: 5px;
      width: 100%;
      outline: none;
      border: 0;
    }

    input:focus {
      outline: none;
    }

    .highlight {
      background: rgba(254, 101, 101, .2)
    }
    header h5 > span {
      color: #fff;
      font-weight: normal;
      font-size: 12px;
    }

    .stacks-frame, .content {
      flex: 1;
      padding: 15px;
      background-color: #efefef;
      margin: 15px;
      border: 1px solid #aaa;
      overflow: scroll;
    }

    .stack {
      margin: 8px;
      padding: 10px;
      border: 1px solid #ddd;
      background: #fff;
      border-radius: 4px;
    }
    
    .stack span {
      color: red;
    }

    .wrapper {
      display: flex;
      justify-content: space-between;
    }

    h1,h2,h3,h4,h5,h6 { margin-top: 0; }

    a {
      color: inherit;
      font-size: 14px;
    }

    .path {
      font-size: .8em;
    }

    .message {
      font-size: 20px;
    }

    .linenumber {
      color: #880000!important;
    }

    .linenumber > span { color: #880000!important }
  </style>
</head>
<body>
  <header>
    <h5><%= error %> <span>at <%= filename %> line <%= line %></span></h5>
    <p class="message"><%= message %></p>
  </header>
  <div class="wrapper">
    <div class="stacks-frame">
      <h4>Call Stack</h4>
      <% stacks.forEach(function(stack, i) { %>
      <div class="stack" data-path="<%= stack.match(/\((.+)\)/) && stack.match(/\((.+)\)/)[1] %>">
        <% var msg = stack.split(' ') %>
        <h5><%- msg[0].split('.').length > 1 ? `${msg[0].split('.')[0]}#<span>${msg[0].split('.')[1]}</span>` : msg[0] %></h5>

        <% if (stack.match(/\((.+)\)/) && stack.match(/\((.+)\)/)[1]) { %>
          <span class="path"><%= stack.match(/\((.+)\)/)[1] %></span>
        <% } %>
      </div>
      <% }) %>
    </div>
    <div class="content">
      <a id="linenumber" href="file://<%= filename %>"><strong><%= filename %> at line <%= line %></strong></a>
      
      <pre>
        <code class="javascript">
          <%- content %>
        </code>
      </pre>
      <input id="REPL" />
      <code id="result" class="javascript">

      </code>
      <table>
        <tr>
          <td>params</td>
          <td><code class=""><%= params %></code></td>
        </tr>
        <tr>
            <td>request headers</td>
            <td>
              <ul>
                <% Object.keys(headers).forEach(function(header) { %>
                  <li><strong><%= header %></strong>: <%= headers[header] %></li>
                <% }) %>
              </ul>
            </td>
          </tr>
      </table>
    </div>
  </div>
</body>
<script>
document.querySelectorAll('.stack')
  .forEach(elm => {
    elm.addEventListener('click', e => {
      const path = e.target.getAttribute('data-path');

      if (path) {
        fetch('/error', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ path: path })
        })
        .then(res => res.json())
        .then(result => {
          document.getElementById('linenumber').innerHTML = '<strong>' + result.filename + ' at ' + result.line + '</strong>';
          document.querySelector('code.javascript')
            .innerHTML = result.content;
          return document.querySelector('code.javascript');
        })
        .then(hljs.highlightBlock)
      }
    })
  })

document
  .getElementById('REPL')
  .addEventListener('keydown', e => {
    if (e.keyCode === 13) {
      fetch('/error/run', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ script: e.target.value }),
      })
      .then(res => res.status === 400 ? Promise.reject(res.json()) : Promise.resolve(res.json()))
      .then(({ result }) => {
        if (result) {
          document.getElementById('result').innerHTML = JSON.stringify(result);
          hljs.configure({ userBR: true })
          hljs.highlightBlock(document.getElementById('result'));
        }        
      })
      .catch(res => res.then(({ error }) => {
        document.getElementById('result').innerHTML = JSON.stringify(error);
        hljs.highlightBlock(document.getElementById('result'));
      }))
    }
  })
</script>
<script>hljs.initHighlightingOnLoad();</script>
</html>
